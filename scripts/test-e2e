#!/bin/bash

# Mini RAG End-to-End Testing Script
# This script runs Playwright E2E tests for the Mini RAG application
# and generates comprehensive test reports

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
REPORTS_DIR="e2e-reports"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT_PREFIX="mini-rag-e2e-test"
PYTEST_ARGS=""
BROWSER=""
HEADLESS=""
WORKERS=""
RETRIES=""
TIMEOUT=""

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -b, --browser BROWSER   Run tests on specific browser (chromium, firefox, webkit)"
    echo "  -H, --headless          Run tests in headless mode"
    echo "  -w, --workers NUM       Number of parallel workers (default: auto)"
    echo "  -r, --retries NUM       Number of retries for failed tests (default: 0)"
    echo "  -t, --timeout SECONDS   Test timeout in seconds (default: 30000)"
    echo "  -f, --fast              Run tests in fast mode (headless, single worker)"
    echo "  -v, --verbose           Verbose output"
    echo "  --regular-only          Run only regular E2E tests (skip user journey tests)"
    echo "  --user-journey-only     Run only user journey tests (skip regular E2E tests)"
    echo "  --install-deps          Install Playwright dependencies"
    echo "  --clean                 Clean test reports and cache"
    echo "  --open-reports          Open test reports in browser after completion"
    echo "  --debug                 Run tests in debug mode"
    echo ""
    echo "Examples:"
    echo "  $0                      # Run all tests (regular + user journey) with default settings"
    echo "  $0 -f                   # Run all tests in fast mode"
    echo "  $0 --user-journey-only  # Run only user journey tests"
    echo "  $0 --regular-only       # Run only regular E2E tests"
    echo "  $0 -b chromium -H       # Run all tests on Chrome in headless mode"
    echo "  $0 -w 4 -r 2            # Run all tests with 4 workers and 2 retries"
    echo "  $0 --install-deps       # Install Playwright dependencies"
    echo "  $0 --clean              # Clean test reports and cache"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Node.js and npm
check_node_environment() {
    print_status "Checking Node.js environment..."
    
    if ! command_exists node; then
        print_error "Node.js is not installed. Please install Node.js first."
        exit 1
    fi
    
    if ! command_exists npm; then
        print_error "npm is not installed. Please install npm first."
        exit 1
    fi
    
    local node_version=$(node --version)
    local npm_version=$(npm --version)
    
    print_success "Node.js version: $node_version"
    print_success "npm version: $npm_version"
}

# Function to check Playwright installation
check_playwright_installation() {
    print_status "Checking Playwright installation..."
    
    if [ ! -f "package.json" ]; then
        print_warning "package.json not found. Creating basic package.json..."
        cat > package.json << EOF
{
  "name": "mini-rag-e2e-tests",
  "version": "1.0.0",
  "description": "End-to-end tests for Mini RAG application",
  "scripts": {
    "test": "playwright test",
    "test:ui": "playwright test --ui",
    "test:debug": "playwright test --debug"
  },
  "devDependencies": {
    "@playwright/test": "^1.40.0"
  }
}
EOF
    fi
    
    if ! command_exists npx; then
        print_error "npx is not available. Please install npm properly."
        exit 1
    fi
    
    # Check if Playwright is installed
    if ! npx playwright --version >/dev/null 2>&1; then
        print_warning "Playwright is not installed. Installing..."
        npm install @playwright/test
    fi
    
    local playwright_version=$(npx playwright --version)
    print_success "Playwright version: $playwright_version"
}

# Function to install Playwright dependencies
install_playwright_deps() {
    print_status "Installing Playwright dependencies..."
    
    # Install Playwright
    npm install @playwright/test
    
    # Install browsers
    npx playwright install
    
    # Install system dependencies (Linux only)
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        print_status "Installing system dependencies for Linux..."
        npx playwright install-deps
    fi
    
    print_success "Playwright dependencies installed successfully!"
}

# Function to check Docker environment
check_docker_environment() {
    print_status "Checking Docker environment..."
    
    if ! command_exists docker; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command_exists docker-compose; then
        print_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker first."
        exit 1
    fi
    
    print_success "Docker environment is ready!"
}

# Function to check if application is running
check_application_status() {
    print_status "Checking if Mini RAG application is running..."
    
    # Check if application is already running
    if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
        print_success "Application is already running and ready!"
        return 0
    else
        print_warning "Application is not running. Please start it first using:"
        echo "  ./start-docker.sh"
        echo ""
        print_error "Cannot run E2E tests without a running application."
        exit 1
    fi
}

# Function to clean test reports and cache
clean_reports() {
    print_status "Cleaning test reports and cache..."
    
    # Remove test reports
    if [ -d "$REPORTS_DIR" ]; then
        rm -rf "$REPORTS_DIR"
        print_success "Test reports cleaned"
    fi
    
    # Remove Playwright cache
    if [ -d ".playwright" ]; then
        rm -rf ".playwright"
        print_success "Playwright cache cleaned"
    fi
    
    # Remove node_modules if requested
    if [ "$1" = "--full" ]; then
        if [ -d "node_modules" ]; then
            rm -rf "node_modules"
            print_success "node_modules cleaned"
        fi
    fi
}

# Function to run E2E tests
run_e2e_tests() {
    print_status "Running E2E tests..."
    
    local overall_success=true
    
    # Run regular E2E tests (unless user-journey-only is specified)
    if [ "$USER_JOURNEY_ONLY" != "true" ]; then
        print_header "Running Regular E2E Tests"
        if run_playwright_tests ""; then
            print_success "Regular E2E tests completed successfully!"
        else
            print_error "Regular E2E tests failed!"
            overall_success=false
        fi
    fi
    
    # Run user journey tests (unless regular-only is specified)
    if [ "$REGULAR_ONLY" != "true" ]; then
        print_header "Running User Journey Tests"
        if run_playwright_tests "--config=playwright-user-journey.config.js"; then
            print_success "User journey tests completed successfully!"
        else
            print_error "User journey tests failed!"
            overall_success=false
        fi
    fi
    
    if [ "$overall_success" = true ]; then
        print_success "All E2E tests completed successfully!"
        return 0
    else
        print_error "Some E2E tests failed!"
        return 1
    fi
}

# Function to run Playwright tests with given config
run_playwright_tests() {
    local config_option="$1"
    
    # Build Playwright command
    local playwright_cmd="npx playwright test"
    
    # Add config option if provided
    if [ -n "$config_option" ]; then
        playwright_cmd="$playwright_cmd $config_option"
    fi
    
    # Add browser option
    if [ -n "$BROWSER" ]; then
        playwright_cmd="$playwright_cmd --project=$BROWSER"
    fi
    
    # Add headless option via env var for configs (Playwright CLI may not support --headless flag)
    if [ "$HEADLESS" = "true" ]; then
        playwright_cmd="E2E_HEADLESS=1 $playwright_cmd"
    fi
    
    # Add workers option
    if [ -n "$WORKERS" ]; then
        playwright_cmd="$playwright_cmd --workers=$WORKERS"
    fi
    
    # Add retries option
    if [ -n "$RETRIES" ]; then
        playwright_cmd="$playwright_cmd --retries=$RETRIES"
    fi
    
    # Add timeout option
    if [ -n "$TIMEOUT" ]; then
        playwright_cmd="$playwright_cmd --timeout=$TIMEOUT"
    fi
    
    # Add verbose option
    if [ "$VERBOSE" = "true" ]; then
        playwright_cmd="$playwright_cmd --reporter=list"
    fi
    
    # Add debug option
    if [ "$DEBUG" = "true" ]; then
        playwright_cmd="$playwright_cmd --debug"
    fi
    
    print_status "Executing: $playwright_cmd"
    
    # Run tests
    if eval "$playwright_cmd"; then
        return 0
    else
        return 1
    fi
}

# Function to open test reports
open_reports() {
    print_status "Opening test reports..."
    
    local reports_opened=false
    
    # Open regular E2E test reports
    if [ -d "$REPORTS_DIR/html" ]; then
        if command_exists open; then
            open "$REPORTS_DIR/html/index.html"
        elif command_exists xdg-open; then
            xdg-open "$REPORTS_DIR/html/index.html"
        else
            print_warning "Cannot open regular E2E reports automatically. Please open: $REPORTS_DIR/html/index.html"
        fi
        reports_opened=true
    fi
    
    # Open user journey test reports
    if [ -d "$REPORTS_DIR/user-journey-html" ]; then
        if command_exists open; then
            open "$REPORTS_DIR/user-journey-html/index.html"
        elif command_exists xdg-open; then
            xdg-open "$REPORTS_DIR/user-journey-html/index.html"
        else
            print_warning "Cannot open user journey reports automatically. Please open: $REPORTS_DIR/user-journey-html/index.html"
        fi
        reports_opened=true
    fi
    
    if [ "$reports_opened" = false ]; then
        print_warning "No test reports found to open"
    fi
}

# Function to show test summary
show_test_summary() {
    print_header "E2E Test Summary"
    
    local overall_passed=0
    local overall_failed=0
    local overall_total=0
    
    # Regular E2E test results
    if [ -f "$REPORTS_DIR/results.json" ]; then
        local total_tests=$(jq '.stats.total' "$REPORTS_DIR/results.json" 2>/dev/null || echo "0")
        local passed_tests=$(jq '.stats.passed' "$REPORTS_DIR/results.json" 2>/dev/null || echo "0")
        local failed_tests=$(jq '.stats.failed' "$REPORTS_DIR/results.json" 2>/dev/null || echo "0")
        local skipped_tests=$(jq '.stats.skipped' "$REPORTS_DIR/results.json" 2>/dev/null || echo "0")
        
        echo "Regular E2E Tests:"
        echo "  Total Tests: $total_tests"
        echo "  Passed: $passed_tests"
        echo "  Failed: $failed_tests"
        echo "  Skipped: $skipped_tests"
        
        overall_passed=$((overall_passed + passed_tests))
        overall_failed=$((overall_failed + failed_tests))
        overall_total=$((overall_total + total_tests))
    fi
    
    # User Journey test results
    if [ -f "$REPORTS_DIR/user-journey-results.json" ]; then
        local uj_total_tests=$(jq '.stats.total' "$REPORTS_DIR/user-journey-results.json" 2>/dev/null || echo "0")
        local uj_passed_tests=$(jq '.stats.passed' "$REPORTS_DIR/user-journey-results.json" 2>/dev/null || echo "0")
        local uj_failed_tests=$(jq '.stats.failed' "$REPORTS_DIR/user-journey-results.json" 2>/dev/null || echo "0")
        local uj_skipped_tests=$(jq '.stats.skipped' "$REPORTS_DIR/user-journey-results.json" 2>/dev/null || echo "0")
        
        echo ""
        echo "User Journey Tests:"
        echo "  Total Tests: $uj_total_tests"
        echo "  Passed: $uj_passed_tests"
        echo "  Failed: $uj_failed_tests"
        echo "  Skipped: $uj_skipped_tests"
        
        overall_passed=$((overall_passed + uj_passed_tests))
        overall_failed=$((overall_failed + uj_failed_tests))
        overall_total=$((overall_total + uj_total_tests))
    fi
    
    echo ""
    echo "Overall Summary:"
    echo "  Total Tests: $overall_total"
    echo "  Passed: $overall_passed"
    echo "  Failed: $overall_failed"
    
    if [ "$overall_failed" -gt 0 ]; then
        print_warning "Some tests failed. Check the reports for details."
    else
        print_success "All tests passed!"
    fi
    
    echo ""
    echo "Reports available at:"
    if [ -d "$REPORTS_DIR/html" ]; then
        echo "  Regular E2E HTML Report: $REPORTS_DIR/html/index.html"
    fi
    if [ -d "$REPORTS_DIR/user-journey-html" ]; then
        echo "  User Journey HTML Report: $REPORTS_DIR/user-journey-html/index.html"
    fi
    if [ -f "$REPORTS_DIR/results.json" ]; then
        echo "  Regular E2E JSON Report: $REPORTS_DIR/results.json"
    fi
    if [ -f "$REPORTS_DIR/user-journey-results.json" ]; then
        echo "  User Journey JSON Report: $REPORTS_DIR/user-journey-results.json"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -b|--browser)
            BROWSER="$2"
            shift 2
            ;;
        -H|--headless)
            HEADLESS="true"
            shift
            ;;
        -w|--workers)
            WORKERS="$2"
            shift 2
            ;;
        -r|--retries)
            RETRIES="$2"
            shift 2
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -f|--fast)
            HEADLESS="true"
            WORKERS="1"
            shift
            ;;
        -v|--verbose)
            VERBOSE="true"
            shift
            ;;
        --install-deps)
            check_node_environment
            install_playwright_deps
            exit 0
            ;;
        --clean)
            clean_reports
            exit 0
            ;;
        --open-reports)
            open_reports
            exit 0
            ;;
        --debug)
            DEBUG="true"
            shift
            ;;
        --regular-only)
            REGULAR_ONLY="true"
            shift
            ;;
        --user-journey-only)
            USER_JOURNEY_ONLY="true"
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    print_header "Mini RAG End-to-End Testing"
    
    # Check environment
    check_node_environment
    check_playwright_installation
    
    # Check if application is running (skip Docker build)
    check_application_status
    
    # Run tests
    if run_e2e_tests; then
        show_test_summary
        print_success "E2E testing completed successfully!"
        exit 0
    else
        show_test_summary
        print_error "E2E testing failed!"
        exit 1
    fi
}

# Run main function
main "$@"
